from typing import List


def generate_get_libs_prompt(file_dict):
  return f"""
Достань из кода библиотеки, но только те которые демонстрируют умение работать с какой то не стандартной технологией, и сделай краткое описание, зачем они нужны.

Код пользователя:
{file_dict}

В ответ верни список библиотек, в указанном формате, а потом объясни свой ответ. 
Пример ответа:
torch -> Используется в машинном обучение

Объяснение я не выбрал библиотеки os, random так как они являются стандартными и не демонстрируют каких либо умений
"""

def generate_soft_skills(data_commits, file_dict):
    return f"""
Основываясь на истории исправлений сотрудника и комментариях к коду, оцените его навыки работы с программным обеспечением по следующим категориям:
Ясность общения, Cамоорганизация, Командное взаимодействие, Ответственность, Адаптивность и Инициативность. 
Оцените каждый навык от 1 до 10 и объясните каждое из них в одном предложении.

История коммитов:
{data_commits}

Код:
{file_dict}

Пример ответа:
Ясность общения -> 6
Сотрудник ясно изъясняется в коммитах и комментариях к коду

Оценить человека нужно один раз, повторно оценивать его не надо, примечания в конце оценки писать тоже не надо 
"""

def generate_prompt_use_history(programmer_info, chat_info):
    return f"""Информация о разработчике: {programmer_info} 
История переписки: {chat_info}.

Ответь на последний вопрос пользователя.
"""


def final_summarization(lang, dev_class, occupation, grade):
    lang = ", ".join(lang)
    dev_class = ", ".join(dev_class)
    occupation = ", ".join(occupation)
    return f'''
Мы проанализировали несколько проектов пользователя и тебе надо объединить всю эту информацию для HR, и дать числовую оценку от 0 до 10.
Не давай рекомендации, а просто скажи на какую позиции можно нанять разработчика и чем он должен заниматься!

Уровень разработчика: {grade}
Человек пишет на языках: {lang}.
В проектах занимает роль: {dev_class}
Характеристика кода: {occupation}

С кратким описанием почему ты сделал такой выбор.
'''

def steck(libs):
    return f'''
Мы проанализировали несколько проектов пользователя и выписали все библиотеки которые он использовал.

Библиотеки:
{libs}

Тебе надо объединить их в категории, для этого мы специально также дали описание каждой библиотеки.
Важно надо объединить все библиотеки из этого списка и не выдумывать новые!!!

В ответ верни созданные категории и через -> через запятую выведи библиотеки данной категории, каждая категория должна быть на новой строчке.    
В иных случаях не используй ->
'''



def generate_code_review_prompt(file_content):
    return f"""
Проверьте чистоту кода. Учитывайте следующие параметры:

Оцените, насколько хорошо соблюдены стандарты написания кода.
Насколько его легко читать.
Насколько логично названы переменные.
Насколько логично расположены блоки в коде.

Код: 
{file_content}

Ответ должен быть кратким из двух предложений, в третьем предложение примерный уровень разработчика Junior, Middel, Senior, не давай комментариев по улучшению кода! 
"""


def prompt_for_get_interesting_files(changes_file):
    changes_file_string = "\n".join(changes_file)
    return f'''
Определи основной стек кандидата, и верни пути до файлов, которые луче всего могут раскрыть его как профессионала и показать его стек. 
  
Файлы: 
{changes_file_string}
Выбранные файлы должны содержать код!!!
В ответ верни пути файлов, которые ты выбрал, каждый новый файл должен быть в новой строчке, оберни этот список в <end_file>, и объясни свой ответ.
'''


def prompt_for_fast_analysis(changes_file):
    changes_file_string = "\n".join(changes_file)
    return f'''
Ты технический эксперт, ты хочешь оценить технические навыки кандидата.
Для этого тебе на вход приходят все файлы проекта, и те файлы которые менял этот кандидат.
У тебя нет времени вникать в весь проект поэтому ты должен выбрать ограниченное число файлов, что бы максимально быстро оценить какими инструментами владеет, кандидат.
Нам не интересны фалы конфигурации, системные, библиотек. Нам интересен, только тот код который писал кандидат.

Нам больше всего интересны файлы в которые могут демонстрировать навыки работы с разными инструментами. 


Файлы которые менял пользователь: 
{changes_file_string}

Сначала верни пути файлов, которые ты выбрал, каждый новый файл должен быть в новой строчке, после того как выведешь файлы, выведи <end_file> и объясни свой ответ.
'''

def prompt_summarization_fast_analysis(lang, dev_class, occupations):
    occupations = ", ".join(occupations)
    return f"""
Кратко расскажи чем занимается разработчик из приведённой информации в два предложения. 

Языки: {lang}
Класс разработчика: {dev_class}
Род занятий:{occupations}

Начни ответ так -> Разработчик занимается 
"""

def prompt_for_analysis_file(project_content):
    changes_file_string = "\n".join(project_content)
    return f'''
Ты технический эксперт, и тебе надо оценить проект человека.
Для этого я тебе покажу все файлы которые написал пользователь тебе, надо сказать, на каком языке он пишет, только часто используемые, и классифицируй его как разработчика и чем он занимается.   
Начни ответ, сразу с ответов на вопросы основные языки, класс разработчика, род занятий, после этого объясни свой ответ!

Проект:
{changes_file_string}

Пример ответов:
Например: 
Языки: JAVA, SQL
Класс: бэкенд разработчик
Род занятия: Поддержка старого кода, работа с микросервисами

Другой пример:
языки: C#, Unity
класс: разработчик игр
Род занятия: Создание новых компонентов и архитектуры
'''

def prompt_summarization_files(files_result: List[str]):
    return f'''
Надо объеденить полученую информацию
'''

def prompt_summarization_repositories(repositories_result: List[str]):
    return f'''
Надо объеденить полученую информацию
'''
